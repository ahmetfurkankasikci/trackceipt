// src/presentation/navigation/AppNavigator.tsx

import { FC, useEffect, useMemo } from 'react';
import { NavigationContainer, useNavigation } from '@react-navigation/native';
import { createNativeStackNavigator } from '@react-navigation/native-stack';

// Tipleri artÄ±k yeni, baÄŸÄ±msÄ±z dosyamÄ±zdan alÄ±yoruz.
import type { AppNavigationProp, RootStackParamList } from './types';

// EkranlarÄ±nÄ±zÄ± import edin.
import HomeScreen from '../screens/HomeScreen/HomeScreen';
import ScanScreen from '../screens/ScanScreen/ScanScreen';
import LoginScreen from '../screens/Auth/LoginScreen';
import SignUpScreen from '../screens/Auth/SignUpScreen';
import { useDispatch, useSelector } from 'react-redux';
import { AppDispatch, AppRootState } from '../../core/redux/store';
import { container } from 'tsyringe';
import { setUser } from '../../core/redux/slices/authSlice';
import { OnAuthStateChangedUseCase } from '../../domain/usecases/OnAuthStateChangedUseCase';
import { ActivityIndicator, StyleSheet, Text, TouchableOpacity, View } from 'react-native';
import ProfileScreen from '../screens/Profile/ProfileScreen';
import ExpenseDetailScreen from '../screens/ExpenseDetail/ExpenseDetailScreen';
const Stack = createNativeStackNavigator<RootStackParamList>();
// --- Navigasyon YÄ±ÄŸÄ±nlarÄ± (Stacks) ---

const ProfileHeaderButton = () => {
  const navigation = useNavigation<AppNavigationProp>();
  return (
    // Dokunulabilir bir alan oluÅŸturuyoruz
    <TouchableOpacity onPress={() => navigation.navigate('Profile')} style={styles.headerButton}>
      {/* Profil ikonu (basit bir metinle temsil ediliyor, SVG veya Icon kÃ¼tÃ¼phanesi kullanÄ±labilir) */}
      <Text style={styles.headerButtonText}>ğŸ‘¤</Text>
    </TouchableOpacity>
  );
};

// KullanÄ±cÄ± giriÅŸ yapmÄ±ÅŸsa gÃ¶sterilecek ekranlar
const MainStack = () => (
  <Stack.Navigator screenOptions={{ headerStyle: { backgroundColor: '#007bff' }, headerTintColor: '#fff' }}>
    <Stack.Screen name="Home" component={HomeScreen} options={{ title: 'MasraflarÄ±m', headerRight: ProfileHeaderButton, }} />
    <Stack.Screen name="Scan" component={ScanScreen} options={{ title: 'FiÅŸ Tara', presentation: 'modal' }} />
    <Stack.Screen name="Profile" component={ProfileScreen} options={{ title: 'Profil' }} />
    <Stack.Screen name="ExpenseDetail" component={ExpenseDetailScreen} options={{ title: 'Masraf DetayÄ±' }} />
  </Stack.Navigator>
);

// KullanÄ±cÄ± giriÅŸ yapmamÄ±ÅŸsa gÃ¶sterilecek ekranlar
const AuthStack = () => (
  <Stack.Navigator screenOptions={{ headerShown: false }}>
    <Stack.Screen name="Login" component={LoginScreen} />
    <Stack.Screen name="SignUp" component={SignUpScreen} />
  </Stack.Navigator>
);

// --- Ana Navigasyon BileÅŸeni ---

const AppNavigator: FC = () => {
  // Redux store'dan gerekli durumlarÄ± seÃ§iyoruz.
  const { user, authReady } = useSelector((state: AppRootState) => state.auth);
  const dispatch = useDispatch<AppDispatch>();

  // DI container'dan UseCase'i alÄ±yoruz.
  const onAuthStateChangedUseCase = useMemo(() => container.resolve(OnAuthStateChangedUseCase), []);

  // Bu effect, uygulama ilk aÃ§Ä±ldÄ±ÄŸÄ±nda bir kere Ã§alÄ±ÅŸÄ±r.
  useEffect(() => {
    // Firebase'in auth durumunu dinlemeye baÅŸlÄ±yoruz.
    const unsubscribe = onAuthStateChangedUseCase.execute((userChange) => {
      // Durum her deÄŸiÅŸtiÄŸinde (giriÅŸ, Ã§Ä±kÄ±ÅŸ, ilk yÃ¼kleme) Redux store'u gÃ¼ncelliyoruz.
      dispatch(setUser(userChange));
    });

    // Component kapandÄ±ÄŸÄ±nda dinleyiciyi sonlandÄ±rÄ±yoruz.
    return unsubscribe;
  }, [dispatch, onAuthStateChangedUseCase]);

  // Firebase ilk kontrolÃ¼ yapana kadar bir yÃ¼klenme ekranÄ± gÃ¶steriyoruz.
  if (!authReady) {
    return (
      <View style={styles.loadingContainer}>
        <ActivityIndicator size="large" />
      </View>
    );
  }

  return (
    <NavigationContainer>
      {user ? <MainStack /> : <AuthStack />}
    </NavigationContainer>
  );
};

const styles = StyleSheet.create({
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  headerButton: {
    marginRight: 15,
    padding: 5,
  },
  headerButtonText: {
    fontSize: 24,
    color: '#fff',
  },
});

export default AppNavigator;
